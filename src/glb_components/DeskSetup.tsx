/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t scene.gltf 
Author: Pedro Silva (https://sketchfab.com/pxdrosilva)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/desk-low-poly-ed62a64f51bf4d80a13e1344093c3909
Title: Desk Low-Poly
*/

import * as THREE from 'three';
import React, { useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useThree } from '@react-three/fiber';

type ActionName = 'Animation';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Desk_Desk_0: THREE.Mesh;
    Boxes_Boxes_0: THREE.Mesh;
    Boxes_B_Tranaparency_0: THREE.Mesh;
    Paper_Paper_0: THREE.Mesh;
    PC_Speaker_PC_Speakers_0: THREE.Mesh;
    PC_Monitor_PC_Monitor_0: THREE.Mesh;
    PC_Monitor_PC_Screen_0: THREE.Mesh;
    PC_Keyboard_PC_Keyboard_0: THREE.Mesh;
    PC_Keyboard_Keyboard_light_0: THREE.Mesh;
    Keyboard_wire_WIre_0: THREE.Mesh;
    PC_Mouse_PC_Mouse_0: THREE.Mesh;
    Mouse_wire_WIre_0: THREE.Mesh;
    Books_Books_0: THREE.Mesh;
    Notebook_Notebook_0: THREE.Mesh;
    Notebook_wire_WIre_0: THREE.Mesh;
    Pen_Pen_0: THREE.Mesh;
    Eraser_Eraser_0: THREE.Mesh;
    Dish_Cup_0: THREE.Mesh;
    Cell_phone_Cell_phone_0: THREE.Mesh;
    Cell_phone_Cell_screen_0: THREE.Mesh;
    Mousepad_Mousepad_0: THREE.Mesh;
  };
  materials: {
    Desk: THREE.MeshStandardMaterial;
    Boxes: THREE.MeshStandardMaterial;
    B_Tranaparency: THREE.MeshStandardMaterial;
    Paper: THREE.MeshStandardMaterial;
    PC_Speakers: THREE.MeshStandardMaterial;
    PC_Monitor: THREE.MeshStandardMaterial;
    PC_Screen: THREE.MeshStandardMaterial;
    material_0: THREE.MeshStandardMaterial;
    Keyboard_light: THREE.MeshStandardMaterial;
    WIre: THREE.MeshStandardMaterial;
    PC_Mouse: THREE.MeshStandardMaterial;
    Books: THREE.MeshStandardMaterial;
    Notebook: THREE.MeshStandardMaterial;
    material_1: THREE.MeshStandardMaterial;
    Eraser: THREE.MeshStandardMaterial;
    material: THREE.MeshStandardMaterial;
    Cell_phone: THREE.MeshStandardMaterial;
    Cell_screen: THREE.MeshStandardMaterial;
    Mousepad: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function DeskSetup(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(
    '/models/poly_desk/scene.glb',
  ) as GLTFResult;

  // Make model dark
  Object.values(materials).forEach((mat) => {
    mat.color.multiplyScalar(0.2);
  });

  return (
    <group
      scale={[0.03, 0.03, 0.03]}
      rotation={[0, (-Math.PI * 1) / 2, 0]}
      {...props}
      dispose={null}
    >
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh
          geometry={nodes.Boxes_Boxes_0.geometry}
          material={materials.Boxes}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes.Boxes_B_Tranaparency_0.geometry}
          material={materials.B_Tranaparency}
          castShadow
          receiveShadow
        />
      </group>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh
          geometry={nodes.PC_Monitor_PC_Monitor_0.geometry}
          material={materials.PC_Monitor}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes.PC_Monitor_PC_Screen_0.geometry}
          material={materials.PC_Screen}
          castShadow
          receiveShadow
        />
      </group>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh
          geometry={nodes.PC_Keyboard_PC_Keyboard_0.geometry}
          material={materials.material_0}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes.PC_Keyboard_Keyboard_light_0.geometry}
          material={materials.Keyboard_light}
          castShadow
          receiveShadow
        />
      </group>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh
          geometry={nodes.Cell_phone_Cell_phone_0.geometry}
          material={materials.Cell_phone}
          castShadow
          receiveShadow
        />
        <mesh
          geometry={nodes.Cell_phone_Cell_screen_0.geometry}
          material={materials.Cell_screen}
          castShadow
          receiveShadow
        />
      </group>
      <mesh
        geometry={nodes.Desk_Desk_0.geometry}
        material={materials.Desk}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Paper_Paper_0.geometry}
        material={materials.Paper}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.PC_Speaker_PC_Speakers_0.geometry}
        material={materials.PC_Speakers}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Keyboard_wire_WIre_0.geometry}
        material={materials.WIre}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.PC_Mouse_PC_Mouse_0.geometry}
        material={materials.PC_Mouse}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Mouse_wire_WIre_0.geometry}
        material={materials.WIre}
        position={[0, 0, -47.153]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Books_Books_0.geometry}
        material={materials.Books}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Notebook_Notebook_0.geometry}
        material={materials.Notebook}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Notebook_wire_WIre_0.geometry}
        material={materials.WIre}
        position={[0, 0, 290.967]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Pen_Pen_0.geometry}
        material={materials.material_1}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Eraser_Eraser_0.geometry}
        material={materials.Eraser}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Dish_Cup_0.geometry}
        material={materials.material}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
      <mesh
        geometry={nodes.Mousepad_Mousepad_0.geometry}
        material={materials.Mousepad}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={100}
        castShadow
        receiveShadow
      />
    </group>
  );
}

useGLTF.preload('/models/poly_desk/scene.glb');
