/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t scene.gltf 
Author: RaphaelaMarques (https://sketchfab.com/RaphaelaMarques)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/offices-lamp-d85ce4a5bc76491b95b20bfca35606ad
Title: Office's Lamp
*/

import * as THREE from 'three';
import React, { useEffect, useRef, useState } from 'react';
import { useGLTF, useHelper } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { PointLightHelper } from 'three';
import { useThree } from '@react-three/fiber';
import { Leva, useControls } from 'leva';

type ActionName = 'Animation';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_8: THREE.Mesh;
    Object_10: THREE.Mesh;
    Object_12: THREE.Mesh;
    Object_14: THREE.Mesh;
    Object_16: THREE.Mesh;
    Object_18: THREE.Mesh;
    Object_20: THREE.Mesh;
    Object_22: THREE.Mesh;
    Object_24: THREE.Mesh;
    Object_25: THREE.Mesh;
    Object_26: THREE.Mesh;
    Object_28: THREE.Mesh;
  };
  materials: {
    ['Material.003']: THREE.MeshStandardMaterial;
    ['Material.002']: THREE.MeshStandardMaterial;
    ['Material.001']: THREE.MeshStandardMaterial;
    ['Material.004']: THREE.MeshPhysicalMaterial;
    ['Material.005']: THREE.MeshStandardMaterial;
    ['Material.006']: THREE.MeshStandardMaterial;
    ['Material.007']: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type Lamp1Props = JSX.IntrinsicElements['group'] & {
  debug?: boolean;
};

export function Lamp1({ debug = false, ...props }: Lamp1Props) {
  // Debug settings
  const { lightIntensityLv } = useControls({
    lightIntensityLv: { value: 200, min: 0, max: 400, step: 1 },
  });

  // Real Features setting
  const [lightIntensity, setLightIntensity] = useState<number>(200);

  // Model load
  const { nodes, materials } = useGLTF(
    '/models/offices_lamp/scene.glb',
  ) as GLTFResult;

  // Light Ref
  const pointlightRef = useRef<THREE.PointLight>(null!);
  const spotlightRef = useRef<THREE.SpotLight>(null!);

  // Light Helpers

  // useHelper(pointlightRef, PointLightHelper, 0.5);
  // useHelper(spotlightRef, THREE.SpotLightHelper);

  // Set spotLight target
  const { scene } = useThree();

  useEffect(() => {
    scene.add(spotlightRef.current.target);
    return () => {
      scene.remove(spotlightRef.current.target);
    };
  }, [spotlightRef]);

  // Custom materials
  const mat7 = materials['Material.007'];
  // mat7.emissive.set(new THREE.Color('yellow').multiplyScalar(1));
  // mat7.emissiveIntensity = 3;

  return (
    <group {...props} dispose={null}>
      {/* Debug */}
      {!debug && <Leva hidden={true} />}

      {/* Bulb */}
      <group
        position={[3.785, 10.589, 0]}
        rotation={[0, 0, 0.628]}
        scale={0.432}
      >
        <mesh
          geometry={nodes.Object_24.geometry}
          material={materials['Material.004']}
        />
        <mesh
          geometry={nodes.Object_25.geometry}
          material={materials['Material.005']}
        />
        <mesh
          geometry={nodes.Object_26.geometry}
          material={materials['Material.006']}
        />
      </group>

      {/* Filament */}
      <mesh
        geometry={nodes.Object_28.geometry}
        material={materials['Material.007']}
        position={[3.704, 10.751, -0.115]}
        rotation={[0.102, 0.012, 0.684]}
        scale={[0.007, 0.269, 0.008]}
      />

      {/* Lamp pointlight */}
      <pointLight
        ref={pointlightRef}
        intensity={debug ? lightIntensityLv : lightIntensity}
        distance={5}
        decay={2}
        color="orange"
        position={[3.9, 10.4, 0]}
      />

      {/* Lamp spotlight */}
      <spotLight
        color="orange"
        ref={spotlightRef}
        position={[3.9, 10.4, 0]}
        angle={Math.PI / 4}
        penumbra={0.5}
        intensity={debug ? lightIntensityLv : lightIntensity}
        castShadow
        distance={0}
        target-position={[15, 0, 0]}
      />

      {/* Pedestal */}
      <mesh
        geometry={nodes.Object_4.geometry}
        material={materials['Material.003']}
        position={[0, 0, -0.22]}
        scale={[1, 0.028, 1]}
      />

      {/* Under pillar */}
      <mesh
        geometry={nodes.Object_6.geometry}
        material={materials['Material.002']}
        position={[-0.69, 4.686, -0.22]}
        scale={[0.075, 4.775, 0.075]}
      />

      {/* High pillar */}
      <mesh
        geometry={nodes.Object_8.geometry}
        material={materials['Material.002']}
        position={[0.171, 8.534, 0]}
        rotation={[0, 0, -0.935]}
        scale={[0.048, 3.055, 0.048]}
      />

      {/* Rotate object */}
      <mesh
        geometry={nodes.Object_10.geometry}
        material={materials['Material.003']}
        position={[-0.677, 8.072, -0.007]}
        rotation={[-1.713, -1.475, 3.044]}
        scale={[0.289, 0.104, 0.289]}
      />

      <mesh
        geometry={nodes.Object_14.geometry}
        material={materials['Material.003']}
        position={[-0.677, 8.063, -0.215]}
        rotation={[-1.713, -1.475, 3.044]}
        scale={[0.289, 0.104, 0.289]}
      />

      {/* Head */}
      <mesh
        geometry={nodes.Object_12.geometry}
        material={materials['Material.001']}
        position={[3.904, 10.498, 0]}
        rotation={[0, 0, 0.7]}
        scale={[0.631, 0.616, 0.666]}
      />

      {/* Head connector */}
      <mesh
        geometry={nodes.Object_16.geometry}
        material={materials['Material.003']}
        position={[2.815, 10.386, 0]}
        rotation={[0, 0, -1.157]}
        scale={[0.105, 0.353, 0.105]}
      />
      <mesh
        geometry={nodes.Object_18.geometry}
        material={materials['Material.003']}
        position={[3.104, 10.236, 0]}
        rotation={[0, 0, -1.107]}
        scale={[0.061, 0.096, 0.061]}
      />
      <mesh
        geometry={nodes.Object_20.geometry}
        material={materials['Material.002']}
        position={[3.329, 9.745, 0.018]}
        rotation={[-0.083, 0.086, 0.476]}
        scale={[0.025, 0.552, 0.025]}
      />
      <mesh
        geometry={nodes.Object_22.geometry}
        material={materials['Material.003']}
        position={[3.576, 9.27, 0.033]}
        rotation={[-0.074, 0.062, 0.497]}
        scale={[0.056, 0.102, 0.056]}
      />
    </group>
  );
}

useGLTF.preload('@/models/offices_lamp/scene.glb');
